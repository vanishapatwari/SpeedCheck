{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Priyanshu Gautam\\\\Downloads\\\\flashtype-master\\\\flashtype-master\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React from \"react\";\nimport { SAMPLE_PARAGRAPHS } from \"../../data/sampleParagraphs\";\nimport ChallengeSection from \"../ChallengeSection/ChallengeSection\";\nimport Footer from \"../Footer/Footer\";\nimport Landing from \"../Landing/Landing\";\nimport Nav from \"../Nav/Nav\";\nimport \"./App.css\";\n/**\n * Schema of Test Info:\n * [\n *    {\n *      testLetter: 'H',\n *      status: correct/incorrect/notAttempted\n *    }, {\n *      testLetter: 'e',\n *      status: correct/incorrect/notAttempted\n *    }\n * ]\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TotalTime = 60;\nconst DefaultState = {\n  selectedParagraph: \"Hello World!\",\n  testInfo: [],\n  timerStarted: false,\n  timeRemaining: TotalTime,\n  words: 0,\n  characters: 0,\n  wpm: 0\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = DefaultState;\n\n    this.fetchNewParagraphFallback = () => {\n      const data = SAMPLE_PARAGRAPHS[Math.floor(Math.random() * SAMPLE_PARAGRAPHS.length)];\n      const selectedParagraphArray = data.split(\"\");\n      const testInfo = selectedParagraphArray.map(selectedLetter => {\n        return {\n          testLetter: selectedLetter,\n          status: \"notAttempted\"\n        };\n      }); // Update the testInfo in state\n\n      this.setState({ ...DefaultState,\n        selectedParagraph: data,\n        testInfo\n      });\n    };\n\n    this.fetchNewParagraph = () => {\n      fetch(\"http://metaphorpsum.com/paragraphs/1/9\").then(response => response.text()).then(data => {\n        // Once the api results are here, break the selectedParagraph into test info\n        const selectedParagraphArray = data.split(\"\");\n        const testInfo = selectedParagraphArray.map(selectedLetter => {\n          return {\n            testLetter: selectedLetter,\n            status: \"notAttempted\"\n          };\n        }); // Update the testInfo in state\n\n        this.setState({ ...DefaultState,\n          selectedParagraph: data,\n          testInfo\n        });\n      });\n    };\n\n    this.startAgain = () => this.fetchNewParagraphFallback();\n\n    this.startTimer = () => {\n      this.setState({\n        timerStarted: true\n      });\n      const timer = setInterval(() => {\n        if (this.state.timeRemaining > 0) {\n          // Change the WPM and Time Remaining\n          const timeSpent = TotalTime - this.state.timeRemaining;\n          const wpm = timeSpent > 0 ? this.state.words / timeSpent * TotalTime : 0;\n          this.setState({\n            timeRemaining: this.state.timeRemaining - 1,\n            wpm: parseInt(wpm)\n          });\n        } else {\n          clearInterval(timer);\n        }\n      }, 1000);\n    };\n\n    this.handleUserInput = inputValue => {\n      if (!this.state.timerStarted) this.startTimer();\n      /**\n       * 1. Handle the underflow case - all characters should be shown as not-attempted\n       * 2. Handle the overflow case - early exit\n       * 3. Handle the backspace case\n       *      - Mark the [index+1] element as notAttempted\n       *        (irrespective of whether the index is less than zero)\n       *      - But, don't forget to check for the overflow here\n       *        (index + 1 -> out of bound, when index === length-1)\n       * 4. Update the status in test info\n       *      1. Find out the last character in the inputValue and it's index\n       *      2. Check if the character at same index in testInfo (state) matches\n       *      3. Yes -> Correct\n       *         No  -> Incorrect (Mistake++)\n       * 5. Irrespective of the case, characters, words and wpm can be updated\n       */\n\n      const characters = inputValue.length;\n      const words = inputValue.split(\" \").length;\n      const index = characters - 1;\n\n      if (index < 0) {\n        this.setState({\n          testInfo: [{\n            testLetter: this.state.testInfo[0].testLetter,\n            status: \"notAttempted\"\n          }, ...this.state.testInfo.slice(1)],\n          characters,\n          words\n        });\n        return;\n      }\n\n      if (index >= this.state.selectedParagraph.length) {\n        this.setState({\n          characters,\n          words\n        });\n        return;\n      } // Make a copy\n\n\n      const testInfo = this.state.testInfo;\n      if (!(index === this.state.selectedParagraph.length - 1)) testInfo[index + 1].status = \"notAttempted\"; // Check for mistake\n\n      const isMistake = inputValue[index] === testInfo[index].testLetter; // Update the testInfo\n\n      testInfo[index].status = isMistake ? \"correct\" : \"incorrect\"; // Update the state\n\n      this.setState({\n        testInfo,\n        words,\n        characters\n      });\n    };\n  }\n\n  componentDidMount() {\n    // As soon as the component mounts, load the selected paragraph from the API\n    this.fetchNewParagraphFallback();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Landing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChallengeSection, {\n        selectedParagraph: this.state.selectedParagraph,\n        testInfo: this.state.testInfo,\n        onInputChange: this.handleUserInput,\n        words: this.state.words,\n        characters: this.state.characters,\n        wpm: this.state.wpm,\n        timeRemaining: this.state.timeRemaining,\n        timerStarted: this.state.timerStarted,\n        startAgain: this.startAgain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Priyanshu Gautam/Downloads/flashtype-master/flashtype-master/src/components/App/App.jsx"],"names":["React","SAMPLE_PARAGRAPHS","ChallengeSection","Footer","Landing","Nav","TotalTime","DefaultState","selectedParagraph","testInfo","timerStarted","timeRemaining","words","characters","wpm","App","Component","state","fetchNewParagraphFallback","data","Math","floor","random","length","selectedParagraphArray","split","map","selectedLetter","testLetter","status","setState","fetchNewParagraph","fetch","then","response","text","startAgain","startTimer","timer","setInterval","timeSpent","parseInt","clearInterval","handleUserInput","inputValue","index","slice","isMistake","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { SAMPLE_PARAGRAPHS } from \"../../data/sampleParagraphs\";\nimport ChallengeSection from \"../ChallengeSection/ChallengeSection\";\nimport Footer from \"../Footer/Footer\";\nimport Landing from \"../Landing/Landing\";\nimport Nav from \"../Nav/Nav\";\nimport \"./App.css\";\n\n/**\n * Schema of Test Info:\n * [\n *    {\n *      testLetter: 'H',\n *      status: correct/incorrect/notAttempted\n *    }, {\n *      testLetter: 'e',\n *      status: correct/incorrect/notAttempted\n *    }\n * ]\n */\n\nconst TotalTime = 60;\nconst DefaultState = {\n    selectedParagraph: \"Hello World!\",\n    testInfo: [],\n    timerStarted: false,\n    timeRemaining: TotalTime,\n    words: 0,\n    characters: 0,\n    wpm: 0,\n};\n\nclass App extends React.Component {\n    // state = {\n    //     selectedParagraph: \"Hello World!\",\n    //     testInfo: [],\n    //     timerStarted: false,\n    //     timeRemaining: TotalTime,\n    //     words: 0,\n    //     characters: 0,\n    //     wpm: 0,\n    // };\n    state = DefaultState;\n\n    fetchNewParagraphFallback = () => {\n        const data =\n            SAMPLE_PARAGRAPHS[\n                Math.floor(Math.random() * SAMPLE_PARAGRAPHS.length)\n            ];\n\n        const selectedParagraphArray = data.split(\"\");\n        const testInfo = selectedParagraphArray.map((selectedLetter) => {\n            return {\n                testLetter: selectedLetter,\n                status: \"notAttempted\",\n            };\n        });\n\n        // Update the testInfo in state\n        this.setState({\n            ...DefaultState,\n            selectedParagraph: data,\n            testInfo,\n        });\n    };\n\n    fetchNewParagraph = () => {\n        fetch(\"http://metaphorpsum.com/paragraphs/1/9\")\n            .then((response) => response.text())\n            .then((data) => {\n                // Once the api results are here, break the selectedParagraph into test info\n                const selectedParagraphArray = data.split(\"\");\n                const testInfo = selectedParagraphArray.map(\n                    (selectedLetter) => {\n                        return {\n                            testLetter: selectedLetter,\n                            status: \"notAttempted\",\n                        };\n                    }\n                );\n\n                // Update the testInfo in state\n                this.setState({\n                    ...DefaultState,\n                    selectedParagraph: data,\n                    testInfo,\n                });\n            });\n    };\n\n    componentDidMount() {\n        // As soon as the component mounts, load the selected paragraph from the API\n        this.fetchNewParagraphFallback();\n    }\n\n    startAgain = () => this.fetchNewParagraphFallback();\n\n    startTimer = () => {\n        this.setState({ timerStarted: true });\n        const timer = setInterval(() => {\n            if (this.state.timeRemaining > 0) {\n                // Change the WPM and Time Remaining\n                const timeSpent = TotalTime - this.state.timeRemaining;\n                const wpm =\n                    timeSpent > 0\n                        ? (this.state.words / timeSpent) * TotalTime\n                        : 0;\n                this.setState({\n                    timeRemaining: this.state.timeRemaining - 1,\n                    wpm: parseInt(wpm),\n                });\n            } else {\n                clearInterval(timer);\n            }\n        }, 1000);\n    };\n\n    handleUserInput = (inputValue) => {\n        if (!this.state.timerStarted) this.startTimer();\n\n        /**\n         * 1. Handle the underflow case - all characters should be shown as not-attempted\n         * 2. Handle the overflow case - early exit\n         * 3. Handle the backspace case\n         *      - Mark the [index+1] element as notAttempted\n         *        (irrespective of whether the index is less than zero)\n         *      - But, don't forget to check for the overflow here\n         *        (index + 1 -> out of bound, when index === length-1)\n         * 4. Update the status in test info\n         *      1. Find out the last character in the inputValue and it's index\n         *      2. Check if the character at same index in testInfo (state) matches\n         *      3. Yes -> Correct\n         *         No  -> Incorrect (Mistake++)\n         * 5. Irrespective of the case, characters, words and wpm can be updated\n         */\n\n        const characters = inputValue.length;\n        const words = inputValue.split(\" \").length;\n        const index = characters - 1;\n\n        if (index < 0) {\n            this.setState({\n                testInfo: [\n                    {\n                        testLetter: this.state.testInfo[0].testLetter,\n                        status: \"notAttempted\",\n                    },\n                    ...this.state.testInfo.slice(1),\n                ],\n                characters,\n                words,\n            });\n\n            return;\n        }\n\n        if (index >= this.state.selectedParagraph.length) {\n            this.setState({\n                characters,\n                words,\n            });\n            return;\n        }\n\n        // Make a copy\n        const testInfo = this.state.testInfo;\n        if (!(index === this.state.selectedParagraph.length - 1))\n            testInfo[index + 1].status = \"notAttempted\";\n\n        // Check for mistake\n        const isMistake = inputValue[index] === testInfo[index].testLetter;\n\n        // Update the testInfo\n        testInfo[index].status = isMistake ? \"correct\" : \"incorrect\";\n\n        // Update the state\n        this.setState({\n            testInfo,\n            words,\n            characters,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Nav />\n                <Landing />\n                <ChallengeSection\n                    selectedParagraph={this.state.selectedParagraph}\n                    testInfo={this.state.testInfo}\n                    onInputChange={this.handleUserInput}\n                    words={this.state.words}\n                    characters={this.state.characters}\n                    wpm={this.state.wpm}\n                    timeRemaining={this.state.timeRemaining}\n                    timerStarted={this.state.timerStarted}\n                    startAgain={this.startAgain}\n                />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}